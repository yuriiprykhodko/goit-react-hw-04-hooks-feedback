{"version":3,"sources":["components/Statistics/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","components/Container/Container.js","components/App.js","reportWebVitals.js","index.js"],"names":["Statistics","total","positiveFeedback","feedbackKeys","feedbacksObj","map","feedback","className","FeedbackOptions","onLeaveFeedback","name","type","onClick","Section","title","children","Notification","message","Container","App","useState","good","setGood","neutral","setNeutral","bad","setBad","Object","keys","countTotalFeedback","reduce","acc","Math","round","e","target","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAgCeA,EA7BI,SAAC,GAKb,IAJJC,EAIG,EAJHA,MACDC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,aACAC,EACI,EADJA,aAEA,OACE,+BACGD,EAAaE,KAAI,SAAAC,GAAQ,OACxB,oBAAmBC,UAAU,aAA7B,SACE,iCACGD,EADH,IACcF,EAAaE,OAFpBA,MAMX,qBAAIC,UAAU,aAAd,mBAAkCN,KAClC,qBAAIM,UAAU,aAAd,+BACqBL,EADrB,W,MChBS,SAASM,EAAT,GAA6D,IAAlCC,EAAiC,EAAjCA,gBAAiBN,EAAgB,EAAhBA,aACzD,OACE,oBAAII,UAAU,UAAd,SACGJ,EAAaE,KAAI,SAAAC,GAAQ,OACxB,6BACE,wBACEC,UAAU,SACVG,KAAMJ,EACNK,KAAK,SACLC,QAASH,EAJX,SAMGH,KAPIA,Q,UCOFO,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,sBAAKR,UAAU,QAAf,UACG,6BAAKO,IAELC,MCIUC,G,MARM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,mCACE,oBAAIV,UAAU,UAAd,SAAyBU,QCMdC,G,MARG,SAAC,GAAD,IAAGH,EAAH,EAAGA,SAAH,OAChB,qBAAKR,UAAU,YAAf,SAA4BQ,MCGf,SAASI,IAErB,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACD,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsBJ,mBAAS,GAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KAsBKtB,EAAe,CAAEiB,OAAME,UAASE,OAC/BtB,EAAewB,OAAOC,KAAKxB,GAE3ByB,EAAqB1B,EAAa2B,QACtC,SAACC,EAAKzB,GAAN,OAAmByB,EAAM3B,EAAaE,KACtC,GAEIJ,EAAmB8B,KAAKC,MAC3BZ,EAAOQ,EAAsB,KAGhC,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAASf,MAAM,wBAAf,SACE,cAAC,EAAD,CACEL,gBAnCgB,SAAAyB,GAGtB,OAFiBA,EAAEC,OAAXzB,MAGN,IAAK,OACHY,GAAQ,SAAAc,GAAS,OAAIA,EAAY,KACjC,MAEF,IAAK,UACHZ,GAAW,SAAAY,GAAS,OAAIA,EAAY,KACpC,MAEF,IAAK,MACHV,GAAO,SAAAU,GAAS,OAAIA,EAAY,OAuB9BjC,aAAcA,MAGlB,cAAC,EAAD,CAASW,MAAM,aAAf,SACGe,EACC,cAAC,EAAD,CACEzB,aAAcA,EACdD,aAAcA,EACdF,MAAO4B,EACP3B,iBAAkBA,IAGpB,cAAC,EAAD,CAAce,QAAQ,2BC7DhC,IAYeoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC7B,EAAD,MAEF8B,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.eb41e66d.chunk.js","sourcesContent":["import './Statistics.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({\r\n   total,\r\n  positiveFeedback,\r\n  feedbackKeys,\r\n  feedbacksObj,\r\n}) => {\r\n  return (\r\n    <ul>\r\n      {feedbackKeys.map(feedback => (\r\n        <li key={feedback} className=\"statistics\">\r\n          <span>\r\n            {feedback}:{feedbacksObj[feedback]}\r\n          </span>\r\n        </li>\r\n      ))}\r\n      <li className=\"statistics\">Total:{total}</li>\r\n      <li className=\"statistics\">\r\n        Positive feedback:{positiveFeedback}%\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\nStatistics.propTypes = {\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n  feedbacksObj: PropTypes.object.isRequired,\r\n  feedbackKeys: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n};\r\n\r\nexport default Statistics;\r\n","import './FeedbackOptions.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function FeedbackOptions({ onLeaveFeedback, feedbackKeys }) {\r\n  return (\r\n    <ul className=\"buttons\">\r\n      {feedbackKeys.map(feedback => (\r\n        <li key={feedback}>\r\n          <button\r\n            className=\"button\"\r\n            name={feedback}\r\n            type=\"button\"\r\n            onClick={onLeaveFeedback}\r\n          >\r\n            {feedback}\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n  feedbackKeys: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\n","import './Section.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <div className=\"title\">\r\n    {<h2>{title}</h2>}\r\n\r\n    {children}\r\n  </div>\r\n);\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\nexport default Section;\r\n","import './Notification.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => (\r\n  <>\r\n    <h2 className=\"message\">{message}</h2>\r\n  </>\r\n);\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\nexport default Notification;\r\n","import PropTypes from 'prop-types';\r\nimport'./Container.css';\r\n\r\nconst Container = ({ children }) => (\r\n  <div className=\"Container\">{children}</div>\r\n);\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Container;","import { useState } from 'react';\nimport Statistics from './Statistics/Statistics';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\nimport Section from './Section/Section';\nimport Notification from './Notification/Notification';\nimport Container from './Container';\n\nexport default function App() {\n\n   const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = e => {\n    const { name } = e.target;\n\n    switch (name) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n\n      default:\n        break;\n    }\n  };\n const feedbacksObj = { good, neutral, bad };\n  const feedbackKeys = Object.keys(feedbacksObj);\n\n  const countTotalFeedback = feedbackKeys.reduce(\n    (acc, feedback) => acc + feedbacksObj[feedback],\n    0,\n  );\n  const positiveFeedback = Math.round(\n    (good / countTotalFeedback) * 100,\n  );\n\n  return (\n    <Container>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          onLeaveFeedback={onLeaveFeedback}\n          feedbackKeys={feedbackKeys}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotalFeedback ? (\n          <Statistics\n            feedbacksObj={feedbacksObj}\n            feedbackKeys={feedbackKeys}\n            total={countTotalFeedback}\n            positiveFeedback={positiveFeedback}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </Container>\n  );\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}